name: CI

on: [push, pull_request]

jobs:
  run_clangformat:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.11
      with:
        source: './Source ./tools'
        extensions: 'h,cpp,c,m,mm'
        clangFormatVersion: 6
        inplace: True
    - name: Check for changes
      run: |
        set +e
        git config --global user.name "Clang-Format"
        git config --global user.email "Clang-Format"
        git commit -am"Clang-format";
        if [ $? -eq 0 ]; then
            url=$(git format-patch -1 HEAD --stdout | nc termbin.com 9999)
            echo "generated clang-format patch can be found at: $url"
            echo "you can pipe patch directly using the following command:";
            echo "curl $url | git apply -v"
            echo "then manually commit and push the changes"
            exit -1;
        fi
        exit 0;

  build_linux:
    runs-on: ubuntu-16.04
    steps:
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache
    - name: Install Vulkan SDK
      run: |
        cd $RUNNER_WORKSPACE
        wget -q -O vulkansdk.tar.gz https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz?Human=true
        tar -zxf vulkansdk.tar.gz
        echo "VULKAN_SDK=$(pwd)/${VULKAN_SDK_VERSION}/x86_64" >> $GITHUB_ENV
      env:
        VULKAN_SDK_VERSION: '1.2.131.1'
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Install Deploy Qt
      run: |
        cd $RUNNER_WORKSPACE
        wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt*.AppImage
        echo "DEPLOYQT_PATH=$(pwd)" >> $GITHUB_ENV
    - name: Install Other Dependencies
      run: |
        sudo apt update
        sudo apt install gcc-9 g++-9 libcurl4-openssl-dev libgl1-mesa-dev libglu1-mesa-dev libalut-dev libevdev-dev
        # The following packages are necessary for linuxdeployqt to work
        sudo apt install libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Set SHORT_HASH
      run: echo "::set-output name=VALUE::${LONG_HASH:0:8}"
      id: short_hash
      env:
        LONG_HASH: ${{ github.sha }}
    - name: Generate CMake Project
      run: |
        mkdir build
        cd build
        cmake .. -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX=./appdir/usr -DBUILD_LIBRETRO_CORE=yes
      env:
        CC: "gcc-9"
        CXX: "g++-9"
    - name: Build
      run: |
        cd build
        cmake --build . --config Release -j $(nproc)
    - name: Run Tests
      run: |
        cd build
        ctest -C Release
    - name: Prepare AppImage Package
      run: |
        cd build
        cmake --build . --target install
        mkdir -p appdir/usr/share/doc/libc6/
        echo "" > appdir/usr/share/doc/libc6/copyright
        ${DEPLOYQT_PATH}/linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -appimage -unsupported-allow-new-glibc
      env:
        VERSION: ${{ steps.short_hash.outputs.VALUE }}
    - name: Upload a Build Artifact x86_64 AppImage
      uses: actions/upload-artifact@v2
      with:
        name: Play_Linux_x86_64_AppImage
        path: build/Play!-${{ env.SHORT_HASH }}-x86_64.AppImage
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
    - name: Upload a Build Artifact x86_64 Libretro
      uses: actions/upload-artifact@v2
      with:
        name: Play_Linux_x86_64_libretro
        path: build/Source/ui_libretro/play_libretro.so
    - name: Upload to S3
      if: ${{ github.event_name != 'pull_request' && env.AWS_ACCESS_KEY_ID != null}}
      run: |
        aws s3 cp build/Play!-$SHORT_HASH-x86_64.AppImage s3://playbuilds/$SHORT_HASH/Play!-$SHORT_HASH-x86_64.AppImage --acl public-read
        aws s3 cp build/Source/ui_libretro/play_libretro.so s3://playbuilds/$SHORT_HASH/play_libretro_linux-x86_64.so --acl public-read
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'

  build_android:
    strategy:
      matrix:
        build-type: ['apk', 'libretro']
    runs-on: ubuntu-latest
    env:
      ANDROID_NDK_VERSION: '21.3.6528147'
      ANDROID_CMAKE_VERSION: '3.10.2.4988404'
    steps:
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    - name: Cache NDK
      id: ndk-cache
      uses: actions/cache@v2
      with:
        path: /usr/local/lib/android/sdk/ndk
        key: ${{ runner.os }}-NdkCache-${{ env.ANDROID_NDK_VERSION }}
    - name: Install Android SDK dependencies
      run: |
        echo y | sdkmanager "ndk;${{ env.ANDROID_NDK_VERSION }}"
        echo y | sdkmanager "cmake;${{ env.ANDROID_CMAKE_VERSION }}"
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Set SHORT_HASH
      run: echo "::set-output name=VALUE::${LONG_HASH:0:8}"
      id: short_hash
      env:
        LONG_HASH: ${{ github.sha }}
    - name: Build APKs
      if: ${{ matrix.build-type == 'apk' }}
      run: |
        cd build_android
        ./gradlew
        ./gradlew assembleRelease
    - name: Build libretro Core
      if: ${{ matrix.build-type == 'libretro' }}
      run: |
        CMAKE_PATH=${ANDROID_SDK_ROOT}/cmake/${{ env.ANDROID_CMAKE_VERSION }}
        export PATH=${CMAKE_PATH}/bin:$PATH
        export NINJA_EXE=${CMAKE_PATH}/bin/ninja
        export ANDROID_NDK=${ANDROID_SDK_ROOT}/ndk/${{ env.ANDROID_NDK_VERSION }}
        export ANDROID_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake
        cd build_retro
        ./android_build.sh
    - name: Prepare Unsigned APKs for Distribution
      if: ${{ matrix.build-type == 'apk'}}
      run: |
        export ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/29.0.3
        cp build_android/build/outputs/apk/release/Play-release-unsigned.apk .
        cp Play-release-unsigned.apk Play-release.apk
        $ANDROID_BUILD_TOOLS/zipalign -c -v 4 Play-release-unsigned.apk
    - name: Prepare Signed APKs for Distribution
      if: ${{ github.event_name != 'pull_request' && matrix.build-type == 'apk'  && env.ANDROID_KEYSTORE_PASS != null}}
      run: |
        export ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/29.0.3
        $ANDROID_BUILD_TOOLS/apksigner sign --ks installer_android/deploy.keystore --ks-key-alias deploy --ks-pass env:ANDROID_KEYSTORE_PASS --key-pass env:ANDROID_KEYSTORE_PASS Play-release.apk
        $ANDROID_BUILD_TOOLS/zipalign -c -v 4 Play-release.apk
      env:
        ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
    - name: Upload a Build Artifact Android APK Signed
      if: ${{ github.event_name != 'pull_request' && matrix.build-type == 'apk' && env.AWS_ACCESS_KEY_ID != null}}
      uses: actions/upload-artifact@v2
      with:
        name: Play_Android_Signed
        path: Play-release.apk
    - name: Upload a Build Artifact Android APK Unsigned
      if: ${{ matrix.build-type == 'apk' }}
      uses: actions/upload-artifact@v2
      with:
        name: Play_Android_APK_Unsigned
        path: Play-release-unsigned.apk
    - name: Upload a Build Artifact Android libretro
      if: ${{ matrix.build-type == 'libretro' }}
      uses: actions/upload-artifact@v2
      with:
        name: Play_Android_libretro
        path: build_retro/play_libretro_*_android.so
    - name: Upload APKs to S3
      if: ${{ github.event_name != 'pull_request' && matrix.build-type == 'apk' && env.AWS_ACCESS_KEY_ID != null}}
      run: |
        aws s3 cp Play-release.apk s3://playbuilds/$SHORT_HASH/Play-release.apk --acl public-read
        aws s3 cp Play-release-unsigned.apk s3://playbuilds/$SHORT_HASH/Play-release-unsigned.apk --acl public-read
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'
    - name: Upload libretro Core to S3
      if: ${{ github.event_name != 'pull_request' && matrix.build-type == 'libretro' && env.AWS_ACCESS_KEY_ID != null}}
      run: |
        ABI_LIST="arm64-v8a armeabi-v7a x86 x86_64"
        for ABI in $ABI_LIST
        do
          aws s3 cp build_retro/play_libretro_${ABI}_android.so s3://playbuilds/$SHORT_HASH/play_libretro_${ABI}_android.so --acl public-read
        done
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'

  build_macos:
    runs-on: macos-latest
    steps:
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache
    - name: Install Vulkan SDK
      run: |
        cd $RUNNER_WORKSPACE
        curl -L --show-error --output vulkansdk.tar.gz https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/mac/vulkansdk-macos-${VULKAN_SDK_VERSION}.tar.gz?Human=true
        tar -zxf vulkansdk.tar.gz
        echo "VULKAN_SDK=$(pwd)/vulkansdk-macos-${VULKAN_SDK_VERSION}/macOS" >> $GITHUB_ENV
      env:
        VULKAN_SDK_VERSION: '1.2.131.1'
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Install AppDmg
      run: npm install -g appdmg
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Set SHORT_HASH
      run: echo "::set-output name=VALUE::${LONG_HASH:0:8}"
      id: short_hash
      env:
        LONG_HASH: ${{ github.sha }}
    - name: Generate CMake Project
      run: |
        mkdir build
        cd build
        cmake .. -G"Xcode" -DBUILD_LIBRETRO_CORE=yes
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
        macdeployqt Source/ui_qt/Release/Play.app
    - name: Run Tests
      run: |
        cd build
        ctest -C Release
    - name: Sign And Notarize
      if: ${{ github.event_name != 'pull_request' && env.MACOS_DEVID_CERTIFICATE != null }}
      run: |
        ./.ci.macos.import_certificate.sh
        ./installer_macos/sign.sh
        ./.ci.macos.notarize.sh
      env:
        MACOS_DEVID_CERTIFICATE: ${{ secrets.MACOS_DEVID_CERTIFICATE }}
        MACOS_DEVID_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_DEVID_CERTIFICATE_PASSWORD }}
        MACOS_NOTARIZE_APPLEID_USERNAME: ${{ secrets.MACOS_NOTARIZE_APPLEID_USERNAME }}
        MACOS_NOTARIZE_APPLEID_PASSWORD: ${{ secrets.MACOS_NOTARIZE_APPLEID_PASSWORD }}
    - name: Generate DMG
      run: |
        cd build
        appdmg ../installer_macos/spec.json Play.dmg
    - name: Upload a Build Artifact dmg
      uses: actions/upload-artifact@v2
      with:
        name: Play_MacOS_dmg
        path: build/Play.dmg
    - name: Upload a Build Artifact libretro
      uses: actions/upload-artifact@v2
      with:
        name: Play_MacOS_libretro
        path: build/Source/ui_libretro/Release/play_libretro.dylib
    - name: Upload to S3
      if: ${{ github.event_name != 'pull_request' && env.AWS_ACCESS_KEY_ID != null}}
      run: |
        aws s3 cp build/Play.dmg s3://playbuilds/$SHORT_HASH/Play.dmg --acl public-read
        aws s3 cp build/Source/ui_libretro/Release/play_libretro.dylib s3://playbuilds/$SHORT_HASH/play_libretro_macOS-x86_64.dylib --acl public-read
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'

  build_ios:
    runs-on: macos-latest
    steps:
    - name: Install dpkg
      run: |
        brew install dpkg
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Set SHORT_HASH
      run: echo "::set-output name=VALUE::${LONG_HASH:0:8}"
      id: short_hash
      env:
        LONG_HASH: ${{ github.sha }}
    - name: Generate CMake Project
      run: |
        mkdir build
        cd build
        cmake .. -G"Xcode" -DCMAKE_TOOLCHAIN_FILE=../deps/Dependencies/cmake-ios/ios.cmake -DTARGET_IOS=ON -DBUILD_PSFPLAYER=ON -DBUILD_LIBRETRO_CORE=yes
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
        codesign -s "-" Source/ui_ios/Release-iphoneos/Play.app
    - name: Generate IPA
      run: |
        cd installer_ios
        ./build_ipa.sh
    - name: Generate Cydia Package
      run: |
        cd installer_ios
        ./build_cydia.sh
    - name: Upload a Build Artifact ipa/deb/bz2
      uses: actions/upload-artifact@v2
      with:
        name: Play_iOS
        path: |
          installer_ios/Play.ipa
          installer_ios/Play.deb
          installer_ios/Packages.bz2
    - name: Upload a Build Artifact libretro
      uses: actions/upload-artifact@v2
      with:
        name: Play_iOS_libretro
        path: build/Source/ui_libretro/Release-iphoneos/play_libretro_ios.dylib
    - name: Upload to S3
      if: ${{ github.event_name != 'pull_request' && env.AWS_ACCESS_KEY_ID != null}}
      run: |
        aws s3 cp installer_ios/Play.ipa s3://playbuilds/$SHORT_HASH/Play.ipa --acl public-read
        aws s3 cp installer_ios/Play.deb s3://playbuilds/$SHORT_HASH/Play.deb --acl public-read
        aws s3 cp installer_ios/Packages.bz2 s3://playbuilds/$SHORT_HASH/Packages.bz2 --acl public-read
        aws s3 cp build/Source/ui_libretro/Release-iphoneos/play_libretro_ios.dylib s3://playbuilds/$SHORT_HASH/play_libretro_ios.dylib --acl public-read
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'
