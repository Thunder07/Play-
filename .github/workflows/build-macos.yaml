name: Build macOS

on: [push, pull_request]
jobs:
  build_macos:
    runs-on: macos-latest
    steps:
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache
    - name: Cache Vulkan SDK
      uses: actions/cache@v2
      id: cache-vulkansdk
      with:
        path: vulkansdk.dmg
        key: ${{ runner.os }}-VulkanSDK-${ VULKAN_SDK_VERSION }
    - name: Install Vulkan SDK
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        cd $RUNNER_WORKSPACE
        curl -L --show-error --output vulkansdk.dmg https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/mac/vulkansdk-macos-${VULKAN_SDK_VERSION}.dmg?Human=true
        hdiutil attach vulkansdk.dmg
        echo "VULKAN_SDK=/Volumes/vulkansdk-macos-${VULKAN_SDK_VERSION}/macOS" >> $GITHUB_ENV
      env:
        VULKAN_SDK_VERSION: '1.2.162.0'
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Install AppDmg
      run: npm install -g appdmg
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Force Fetch Git Tags
      run: git fetch --tags --force
    - name: Set SHORT_HASH
      run: echo "::set-output name=VALUE::${LONG_HASH:0:8}"
      id: short_hash
      env:
        LONG_HASH: ${{ github.sha }}
    - name: Generate CMake Project
      run: |
        mkdir build
        cd build
        cmake .. -G"Xcode" -DBUILD_LIBRETRO_CORE=yes
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
        macdeployqt Source/ui_qt/Release/Play.app
    - name: Run Tests
      run: |
        cd build
        ctest -C Release
    - name: Sign And Notarize
      if: ${{ env.MACOS_DEVID_CERTIFICATE != null }}
      run: |
        ./.ci.macos.import_certificate.sh
        ./installer_macos/sign.sh
        ./.ci.macos.notarize.sh
      env:
        MACOS_DEVID_CERTIFICATE: ${{ secrets.MACOS_DEVID_CERTIFICATE }}
        MACOS_DEVID_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_DEVID_CERTIFICATE_PASSWORD }}
        MACOS_NOTARIZE_APPLEID_USERNAME: ${{ secrets.MACOS_NOTARIZE_APPLEID_USERNAME }}
        MACOS_NOTARIZE_APPLEID_PASSWORD: ${{ secrets.MACOS_NOTARIZE_APPLEID_PASSWORD }}
    - name: Generate DMG
      run: |
        cd build
        appdmg ../installer_macos/spec.json Play.dmg
    - name: Upload a Build Artifact dmg
      uses: actions/upload-artifact@v2
      with:
        name: Play_MacOS_dmg
        path: build/Play.dmg
    - name: Upload a Build Artifact libretro
      uses: actions/upload-artifact@v2
      with:
        name: Play_MacOS_libretro
        path: build/Source/ui_libretro/Release/play_libretro.dylib
    - name: Upload to S3
      if: ${{ env.AWS_ACCESS_KEY_ID != null}}
      run: |
        aws s3 cp build/Play.dmg s3://playbuilds/$SHORT_HASH/Play.dmg --acl public-read
        aws s3 cp build/Source/ui_libretro/Release/play_libretro.dylib s3://playbuilds/$SHORT_HASH/play_libretro_macOS-x86_64.dylib --acl public-read
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'
